statements      : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement       : KEYWORD: return expr?
                : KEYWORD: continue
                : KEYWORD: break
                : expr

expr            : KEYWORD:var IDENTIFIER EQ expr
                : comp-expr ((KEYWORD:and|KEYWORD:or) comp-expr)*

comp-expr       : not comp-expr
                : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr:     : term ((PLUS|MINUS) term)*

term            : factor ((MUL|DIV|INT_DIV) factor)*

factor          : (PLUS|MINUS) factor
                : power

power           : call (POW factor)*

call            : atom (LPAREN (expr (COMMA expr)* )? RPAREN)?

atom            : INT|FLOAT|STRING|IDENTIFIER
                : LPAREN expr RPAREN
                : list-expr
                : dict-expr
                : if-expr
                : for-expr
                : while-expr
                : func-def

list-expr       : LSQUARE (expr (COMMA expr)* )? RSQUARE

dict-expr       : LCURLY (expr COLON expr (COMMA expr COLON expr)* )? RCURLY

if-expr     : KEYWORD:IF expr KEYWORD:THEN
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-b   : KEYWORD:ELIF expr KEYWORD:THEN
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-c   : KEYWORD:ELSE
              statement
            | (NEWLINE statements KEYWORD:END)

for-expr    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr 
              (KEYWORD:STEP expr)? KEYWORD:THEN
              statement
            | (NEWLINE statements KEYWORD:END)

while-expr  : KEYWORD:WHILE expr KEYWORD:THEN
              statement
            | (NEWLINE statements KEYWORD:END)

func-def    : KEYWORD:FUN IDENTIFIER?
              LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
              (ARROW expr)
            | (NEWLINE statements KEYWORD:END)